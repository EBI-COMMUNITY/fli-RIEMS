#!/bin/bash

############################################################################
#
# Copyright (C) 2008-2009 - 454 Life Sciences
#
#  This script calls the main startGsProcessor script with either the
#   signalProcessing pipeline parameter (in the case of continuing processing
#   after an on-the-fly processing) or fullProcessing in the case of 
#   starting with the raw images.
#
#
############################################################################

############################################################################
#
# It should not be necessary to edit this file.
# All user settings are expressed as environmental variables.  
#
############################################################################


showHelp()
{
EXENAME=`basename $0`
cat <<MOREHELP

usage: $EXENAME --pipe=PIPELINE.xml D_dir [OTHER_OPTIONS_TO_GSRUNPROCESSOR]

This command allows users to re-do the filtering and base
calling sections of signal processing.  It requires that
the user pass a custom pipeline filename to this command. 

To generate a template pipeline you can edit, type one of
the following commands, as appropriate, the first if
re-filtering a shotgun run and the second if re-filtering
an amplicon run:

   gsRunProcessor --template=filterOnly > myPipeline.xml
   gsRunProcessor --template=filterOnlyAmplicons > myPipeline.xml
	
Then edit the file with a program like 'nedit' or 'vi', 
save it and run the pipeline with the following command:

   runAnalysisFilter --pipe=myPipeline.xml D_DIRECTORY

Call 'gsRunProcessor --help' for information on additional
arguments that can be passed to the gsRunProcessor. 

MOREHELP

exit 0
}


if test "x$1" == "x"; then
   echo "You must specify a source directory on the command line."
   showHelp
   exit 0
fi

if [ -e $(dirname $BASH_SOURCE)/startGsProcessor ]; then
    REAL_GSRUNPROCESSOR_BIN=$(readlink -f $(dirname $BASH_SOURCE 2>/dev/null )/startGsProcessor 2>/dev/null)
else
    REAL_GSRUNPROCESSOR_BIN=$(readlink -f $(which startGsProcessor 2>/dev/null) 2>/dev/null)
fi

if [ -z "${REAL_GSRUNPROCESSOR_BIN}" ]; then
   echo "ERROR: No gsRunProcessor was found.  Please ensure that gsRunProcessor is in your PATH."
   exit 1
fi


# See if the user overrode the pipe command
PFOUND=0
for aCommand in $*; do
	if [ "$aCommand" == "--version" -o "$aCommand" == "-V" ]; then
		echo 
		echo "NOTE: $(basename $0) is a wrapper script for:"
		echo
		$REAL_GSRUNPROCESSOR_BIN --version
		exit 0
	fi
	if [ "$aCommand" == "--help" -o "$aCommand" == "-h" ]; then
		showHelp
		exit 0
	fi
	if [ $PFOUND -eq 1 ];then
		PIPELINE_FILE=$aCommand
		ADDL_ARGS="$ADDL_ARGS -p ${aCommand}"
		PFOUND=0
		shift
	fi

	if [ "${aCommand:0:2}" == "-p" ]; then
		PFOUND=1
	elif [ "${aCommand:0:7}" == "--pipe=" ]; then
		PIPELINE_FILE=${aCommand:7}
		ADDL_ARGS="$ADDL_ARGS ${aCommand}"
		shift
	elif [ "${aCommand:0:2}" == "--" ]; then
		ADDL_ARGS="$ADDL_ARGS ${aCommand}"
		shift
	elif [ "${aCommand:0:1}" == "-" ]; then
		ADDL_ARGS="$ADDL_ARGS ${aCommand}"
		shift
	else
		if [ -n "$SOURCE_DIR" ]; then
			echo 
   			echo "You may only provide one directory at a time on the command line."	
   			showHelp
   			exit 1 	
		fi
		SOURCE_DIR="$(readlink -f "${aCommand}")"
	fi
	
done
	
if [ -z "$PIPELINE_FILE" ] ; then
   echo 
   echo "You must provide a specific pipeline name on the command line."
   
   showHelp
   exit 1
fi


exec $REAL_GSRUNPROCESSOR_BIN $ADDL_ARGS --filterOnly $SOURCE_DIR

